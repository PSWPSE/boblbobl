generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String
  password          String?
  provider          String             @default("email")
  subscription      String             @default("free")
  isVerified        Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  contentGuidelines ContentGuideline[]
  generatedContents GeneratedContent[]
  socialAccounts    SocialAccount[]
  sourceData        SourceData[]

  @@map("users")
}

model SocialAccount {
  id           String   @id @default(cuid())
  userId       String
  provider     String
  providerId   String
  email        String?
  name         String?
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("social_accounts")
}

model ContentGuideline {
  id               String             @id @default(cuid())
  userId           String
  name             String
  type             String
  keywords         Json?
  memo             String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedContent GeneratedContent[]

  @@map("content_guidelines")
}

model SourceData {
  id               String             @id @default(cuid())
  userId           String
  filename         String
  fileType         String
  fileUrl          String?
  extractedText    String
  metadata         Json?
  createdAt        DateTime           @default(now())
  generatedContent GeneratedContent[]
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("source_data")
}

model GeneratedContent {
  id           String            @id @default(cuid())
  userId       String
  sourceDataId String?
  guidelineId  String?
  title        String
  content      String
  summary      String?
  contentType  String
  status       String            @default("draft")
  tags         Json?
  metadata     Json?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  guideline    ContentGuideline? @relation(fields: [guidelineId], references: [id])
  sourceData   SourceData?       @relation(fields: [sourceDataId], references: [id])
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("generated_contents")
}
