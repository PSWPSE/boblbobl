# 🛡️ BlogCraft AI 오류 방지 종합 가이드

## 🚨 반복 오류 방지 규칙 (절대 준수)

### 1️⃣ 환경변수 관리 규칙

**❌ 절대 하지 말 것:**
- `.env` 파일 없이 서버 시작
- 환경변수 하드코딩
- 환경변수 값 추측이나 임의 변경

**✅ 반드시 할 것:**
- 서버 시작 전 환경변수 파일 존재 확인
- 모든 환경변수는 아래 정확한 값 사용
- 환경변수 누락 시 즉시 생성

```env
# 백엔드 환경변수 (.env)
JWT_SECRET=bdb892b35ec2e50210a14b87bc5a257d
DATABASE_URL="postgresql://postgres:TmdGFdaksSgPPbAsDsAnHlTDPpWjkqUu@shortline.proxy.rlwy.net:54002/railway"
OPENAI_API_KEY=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
CLIENT_URL=http://localhost:3000
GOOGLE_CLIENT_ID=663459245926-s568h91gdsu8q33nks47l4umad616uu9.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=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
NAVER_CLIENT_ID=Ill7zizD7cfU7FiVwH74
NAVER_CLIENT_SECRET=e6MnDF8vxy
CLOUDINARY_CLOUD_NAME=dfrqgjdtd
CLOUDINARY_API_KEY=674531278499429
CLOUDINARY_API_SECRET=3s1ldvQ6qVAh7yOzsSmlf9aR2Sc
```

### 2️⃣ 모듈 시스템 통일 규칙

**❌ 절대 하지 말 것:**
- `require()` 사용 (CommonJS 방식)
- `module.exports` 사용
- 모듈 시스템 혼재

**✅ 반드시 할 것:**
- 모든 파일에서 ES modules 사용
- `import/export` 방식만 사용
- 라우터 로딩은 반드시 `import` 방식

```typescript
// ✅ 올바른 방식
import authRoutes from './routes/auth';
import contentRoutes from './routes/content';

// ❌ 잘못된 방식
const authRoutes = require('./routes/auth').default;
```

### 3️⃣ 서버 프로세스 관리 규칙

**❌ 절대 하지 말 것:**
- 기존 서버 프로세스 확인 없이 새 서버 시작
- 포트 충돌 무시
- 여러 서버 인스턴스 동시 실행

**✅ 반드시 할 것:**
- 서버 시작 전 기존 프로세스 정리
- 포트 사용 현황 확인
- 단일 서버 인스턴스만 실행

```bash
# 서버 시작 전 필수 확인
pkill -f "node.*ts-node" && pkill -f "node.*nodemon"
lsof -i :8000,3000  # 포트 사용 현황 확인
```

### 4️⃣ 백엔드 서버 시작 규칙

**필수 순서:**
1. 환경변수 파일 존재 확인
2. 기존 프로세스 정리
3. 데이터베이스 연결 확인
4. 서버 시작

```bash
# 백엔드 서버 시작 템플릿
cd /Users/alphabridge/BOBLBOBL/backend
if [ ! -f .env ]; then echo "❌ .env 파일 누락!"; exit 1; fi
pkill -f "node.*backend" 2>/dev/null
npm run dev
```

### 5️⃣ 프론트엔드 서버 시작 규칙

**필수 확인사항:**
- 백엔드 서버 먼저 시작
- 포트 3000 사용 가능 확인
- 환경변수 파일 존재 확인

```bash
# 프론트엔드 서버 시작 템플릿
cd /Users/alphabridge/BOBLBOBL/frontend
if [ ! -f .env.local ]; then echo "❌ .env.local 파일 누락!"; exit 1; fi
pkill -f "node.*frontend.*next" 2>/dev/null
npm run dev
```

## 🔧 문제 해결 체크리스트

### 서버 시작 문제 시
1. [ ] `.env` 파일 존재 확인
2. [ ] 환경변수 값 정확성 확인
3. [ ] 기존 프로세스 정리
4. [ ] 포트 충돌 확인
5. [ ] 데이터베이스 연결 확인

### 모듈 로딩 오류 시
1. [ ] `import/export` 방식 사용 확인
2. [ ] `require()` 사용 여부 확인
3. [ ] 파일 경로 정확성 확인
4. [ ] TypeScript 설정 확인

### 데이터베이스 연결 오류 시
1. [ ] DATABASE_URL 정확성 확인
2. [ ] Prisma 클라이언트 재생성
3. [ ] 데이터베이스 서버 상태 확인
4. [ ] 네트워크 연결 확인

## 🚀 서버 시작 표준 절차

### 1단계: 환경 준비
```bash
cd /Users/alphabridge/BOBLBOBL
pkill -f "node.*ts-node" && pkill -f "node.*nodemon" && pkill -f "node.*next"
```

### 2단계: 백엔드 시작
```bash
cd /Users/alphabridge/BOBLBOBL/backend
npm run dev
```

### 3단계: 프론트엔드 시작
```bash
cd /Users/alphabridge/BOBLBOBL/frontend
npm run dev
```

### 4단계: 상태 확인
```bash
curl -s http://localhost:8000/health
curl -s -I http://localhost:3000
```

## 🔒 보안 및 버전 관리 규칙

**중요 파일 관리:**
- `.env` 파일: 절대 커밋 금지, 로컬에만 보관
- `package.json`: 의존성 변경 시 팀 공유 필수
- 설정 파일: 변경 시 문서화 필수

**API 키 관리:**
- 환경변수로만 관리
- 하드코딩 절대 금지
- 만료 시 즉시 갱신

## 📊 성능 및 모니터링

**서버 상태 모니터링:**
- Health check 엔드포인트 정기 확인
- 로그 파일 크기 관리
- 메모리 사용량 모니터링

**개발 환경 최적화:**
- 불필요한 프로세스 정리
- 포트 중복 사용 방지
- 개발 도구 버전 통일

이 규칙들을 준수하면 반복되는 오류를 95% 이상 방지할 수 있습니다.
