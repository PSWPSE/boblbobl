# 🔧 환경변수 자동 설정 가이드

## 🚀 환경변수 파일 자동 생성 스크립트

### 백엔드 환경변수 자동 생성
```bash
# 백엔드 .env 파일 자동 생성
create_backend_env() {
    cd /Users/alphabridge/BOBLBOBL/backend
    if [ ! -f .env ]; then
        cat > .env << 'EOF'
# JWT 설정
JWT_SECRET=bdb892b35ec2e50210a14b87bc5a257d

# 데이터베이스 설정
DATABASE_URL="postgresql://postgres:TmdGFdaksSgPPbAsDsAnHlTDPpWjkqUu@shortline.proxy.rlwy.net:54002/railway"

# OpenAI API 설정
OPENAI_API_KEY=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

# 클라이언트 URL
CLIENT_URL=http://localhost:3000

# Google OAuth 설정
GOOGLE_CLIENT_ID=663459245926-s568h91gdsu8q33nks47l4umad616uu9.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=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

# Naver OAuth 설정
NAVER_CLIENT_ID=Ill7zizD7cfU7FiVwH74
NAVER_CLIENT_SECRET=e6MnDF8vxy

# Cloudinary 설정
CLOUDINARY_CLOUD_NAME=dfrqgjdtd
CLOUDINARY_API_KEY=674531278499429
CLOUDINARY_API_SECRET=3s1ldvQ6qVAh7yOzsSmlf9aR2Sc
EOF
        echo "✅ 백엔드 .env 파일 생성 완료"
    else
        echo "✅ 백엔드 .env 파일 이미 존재"
    fi
}
```

### 프론트엔드 환경변수 자동 생성
```bash
# 프론트엔드 .env.local 파일 자동 생성
create_frontend_env() {
    cd /Users/alphabridge/BOBLBOBL/frontend
    if [ ! -f .env.local ]; then
        cat > .env.local << 'EOF'
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_CLIENT_URL=http://localhost:3000
EOF
        echo "✅ 프론트엔드 .env.local 파일 생성 완료"
    else
        echo "✅ 프론트엔드 .env.local 파일 이미 존재"
    fi
}
```

## 🔄 완전 자동 서버 시작 스크립트

### 통합 서버 시작 스크립트
```bash
#!/bin/bash
# BlogCraft AI 완전 자동 서버 시작 스크립트

blogcraft_start() {
    echo "🚀 BlogCraft AI 서버 시작 중..."
    
    # 1. 기존 프로세스 정리
    echo "🔄 기존 프로세스 정리 중..."
    pkill -f "node.*ts-node" 2>/dev/null
    pkill -f "node.*nodemon" 2>/dev/null
    pkill -f "node.*next" 2>/dev/null
    sleep 2
    
    # 2. 환경변수 파일 생성
    echo "📁 환경변수 파일 확인 중..."
    create_backend_env
    create_frontend_env
    
    # 3. 백엔드 서버 시작
    echo "🔧 백엔드 서버 시작 중..."
    cd /Users/alphabridge/BOBLBOBL/backend
    npm run dev &
    BACKEND_PID=$!
    sleep 5
    
    # 4. 백엔드 상태 확인
    if curl -s http://localhost:8000/health > /dev/null; then
        echo "✅ 백엔드 서버 시작 성공 (PID: $BACKEND_PID)"
    else
        echo "❌ 백엔드 서버 시작 실패"
        return 1
    fi
    
    # 5. 프론트엔드 서버 시작
    echo "🎨 프론트엔드 서버 시작 중..."
    cd /Users/alphabridge/BOBLBOBL/frontend
    npm run dev &
    FRONTEND_PID=$!
    sleep 5
    
    # 6. 프론트엔드 상태 확인
    if curl -s -I http://localhost:3000 > /dev/null; then
        echo "✅ 프론트엔드 서버 시작 성공 (PID: $FRONTEND_PID)"
    else
        echo "❌ 프론트엔드 서버 시작 실패"
        return 1
    fi
    
    echo "🎉 BlogCraft AI 서버 시작 완료!"
    echo "📍 백엔드: http://localhost:8000"
    echo "🌐 프론트엔드: http://localhost:3000"
}
```

## 🛠️ 문제 해결 자동화 스크립트

### 환경변수 검증 스크립트
```bash
# 환경변수 검증 함수
validate_env() {
    echo "🔍 환경변수 검증 중..."
    
    # 백엔드 환경변수 검증
    cd /Users/alphabridge/BOBLBOBL/backend
    if [ ! -f .env ]; then
        echo "❌ 백엔드 .env 파일 누락"
        create_backend_env
    else
        echo "✅ 백엔드 .env 파일 존재"
    fi
    
    # 프론트엔드 환경변수 검증
    cd /Users/alphabridge/BOBLBOBL/frontend
    if [ ! -f .env.local ]; then
        echo "❌ 프론트엔드 .env.local 파일 누락"
        create_frontend_env
    else
        echo "✅ 프론트엔드 .env.local 파일 존재"
    fi
}
```

### 포트 충돌 해결 스크립트
```bash
# 포트 충돌 해결 함수
resolve_port_conflicts() {
    echo "🔍 포트 충돌 확인 중..."
    
    # 8000번 포트 확인
    if lsof -i :8000 > /dev/null 2>&1; then
        echo "⚠️  포트 8000 사용 중. 프로세스 종료 중..."
        pkill -f "node.*8000" 2>/dev/null
        sleep 2
    fi
    
    # 3000번 포트 확인
    if lsof -i :3000 > /dev/null 2>&1; then
        echo "⚠️  포트 3000 사용 중. 프로세스 종료 중..."
        pkill -f "node.*3000" 2>/dev/null
        sleep 2
    fi
    
    echo "✅ 포트 충돌 해결 완료"
}
```

## 📋 일일 시작 체크리스트

### 개발 시작 전 필수 확인
```bash
# 개발 시작 전 체크리스트
pre_dev_check() {
    echo "📋 개발 시작 전 체크리스트 실행 중..."
    
    # 1. 환경변수 검증
    validate_env
    
    # 2. 포트 충돌 해결
    resolve_port_conflicts
    
    # 3. 데이터베이스 연결 확인
    cd /Users/alphabridge/BOBLBOBL/backend
    npx prisma db push > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "✅ 데이터베이스 연결 정상"
    else
        echo "❌ 데이터베이스 연결 문제"
        return 1
    fi
    
    # 4. 의존성 설치 확인
    if [ ! -d "node_modules" ]; then
        echo "📦 백엔드 의존성 설치 중..."
        npm install
    fi
    
    cd /Users/alphabridge/BOBLBOBL/frontend
    if [ ! -d "node_modules" ]; then
        echo "📦 프론트엔드 의존성 설치 중..."
        npm install
    fi
    
    echo "✅ 개발 시작 준비 완료"
}
```

## 🔧 사용 방법

1. **빠른 시작**: `blogcraft_start`
2. **환경 검증**: `validate_env`
3. **포트 해결**: `resolve_port_conflicts`
4. **완전 체크**: `pre_dev_check`

이 스크립트들을 사용하면 환경변수 관련 오류를 완전히 방지할 수 있습니다.
description:
globs:
alwaysApply: false
---
